<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.query.MapMaster">
	<resultMap id="hashmap" type="java.util.HashMap">
	</resultMap>
	
	<!-- member S -->
	<select id="select_member" parameterType="MemberVO" resultType="MemberVO">
		select
			m.idx, m.user_id, m.passwd, m.hp, m.unit_cost, m.line, m.memo, m.timeLogin, m.timeJoin, m.leaveYN 
			, p.point 
		from member m left outer join point p
		on (m.user_id = p.user_id)
		where
		m.user_id = #{user_id}
	</select>
	
	<select id="select_member_list_page" parameterType="MemberVO" resultType="MemberVO">
		select
			m.idx, m.user_id, m.passwd, m.hp, m.unit_cost, m.line, m.memo, m.timeLogin, m.timeJoin, m.leaveYN 
			, p.point 
		from member m left outer join point p
		on (m.user_id = p.user_id)
		<where>
			<if test="user_id != null">
				m.user_id like #{user_id}
			</if>
			<if test="hp != null">
				or m.hp like #{hp}
			</if>
		</where>
		order by m.idx desc
		limit #{start}, #{end}
		
	</select>
	
	<select id="select_member_list_page_count" parameterType="com.m.admin.vo.MemberVO" resultType="int" >
		select
			count(*) as cnt 
		from member m left outer join point p
		on (m.user_id = p.user_id)
		<where>
			<if test="user_id != null">
				m.user_id like #{user_id}
			</if>
			<if test="hp != null">
				or m.hp like #{hp}
			</if>
		</where>
		
	</select>
	
	<update id="update_member" parameterType="MemberVO">
		update member
		<set>
			<if test="hp != null">hp = #{hp} , </if>
			<if test="memo != null">memo = #{memo} , </if>
			<if test="unit_cost != null">unit_cost = #{unit_cost} </if>
			<if test="line != null">line = #{line} </if>
			<if test="leaveYN != null">leaveYN = #{leaveYN} </if>
		</set>
		where
		user_id = #{user_id}
	</update>
	
	<update id="update_member_passwd" parameterType="MemberVO">
		update member set
		passwd=password(#{passwd})
		where
		user_id = #{user_id}
	</update>
	<!-- member E -->
	
	<!-- billing S -->
	<insert id="insert_billing" parameterType="com.m.admin.vo.BillingVO">
		INSERT INTO billing
		(user_id, method, amount, order_no, unit_cost, point, remain_point, memo, admin_id, timeWrite) 
		VALUES (
		#{user_id},
		#{method}, 
		#{amount}, 
		#{order_no}, 
		#{unit_cost}, 
		#{point}, 
		#{remain_point}, 
		#{memo}, 
		#{admin_id}, 
		#{timeWrite} 
		)
	</insert>
	
	<select id="select_bill_list_page" parameterType="com.m.admin.vo.BillingVO" resultType="com.m.admin.vo.BillingVO">
		select
			idx, user_id, method, amount, order_no, unit_cost, point, remain_point, memo, admin_id, timeWrite
		from billing
		<where>
			<if test="user_id != null">
				user_id like #{user_id}
			</if>
		</where>
		order by idx desc
		limit #{start}, #{end}
	</select>
	<select id="select_bill_list_page_count" parameterType="com.m.admin.vo.BillingVO" resultType="int" >
		select
			count(*) as cnt 
		from billing
		<where>
			<if test="user_id != null">
				user_id like #{user_id}
			</if>
		</where>
		
	</select>
	
	<!-- billing E -->
	
	<!-- point S -->
	<insert id="insert_point_log" parameterType="com.m.point.PointLogVO">
		insert into point_log(user_id, point, code, memo, timeWrite, old_point, now_point) 
		values (#{user_id}, #{point}, #{code}, #{memo}, #{timeWrite}, #{old_point}, #{now_point})
	</insert>
	
	<update id="update_point" parameterType="com.m.point.PointVO">
		update point set
		point=point+#{point}, timeWrite=#{timeWrite} where user_id=#{user_id}
	</update>
	
	<select id="select_pointlog_list_page" parameterType="com.m.admin.vo.PointLogVO" resultType="com.m.admin.vo.PointLogVO">
		select
			idx, user_id, point, code, memo, timeWrite, old_point, now_point 
		from point_log
		<where>
			<if test="user_id != null">
				user_id like #{user_id}
			</if>
		</where>
		order by idx desc
		limit #{start}, #{end}
	</select>
	<select id="select_pointlog_list_page_count" parameterType="com.m.admin.vo.PointLogVO" resultType="int" >
		select
			count(*) as cnt 
		from point_log
		<where>
			<if test="user_id != null">
				user_id like #{user_id}
			</if>
		</where>
		
	</select>
	<!-- point E -->
	
	<!-- sent S -->
	<select id="select_sentlog_list_page" parameterType="com.m.admin.vo.SentLogVO" resultType="com.m.admin.vo.SentLogVO">
		select
			idx, user_id, line, mode, method, message, cnt, user_ip, timeSend, timeWrite, ynDel, delType, timeDel 
		from sent_log
		<where>
			<if test="user_id != null">
				user_id like #{user_id}
			</if>
		</where>
		order by idx desc
		limit #{start}, #{end}
	</select>
	<select id="select_sentlog_list_page_count" parameterType="com.m.admin.vo.SentLogVO" resultType="int" >
		select
			count(*) as cnt 
		from sent_log
		<where>
			<if test="user_id != null">
				user_id like #{user_id}
			</if>
		</where>
		
	</select>
	<!-- sent E -->
	
	<!-- status S -->
	<select id="select_status_month_list" parameterType="com.m.admin.vo.StatusVO" resultType="com.m.admin.vo.StatusVO">
		select 
		 b.dt as dt, 
		 sum(if(b.t = 'sms',b.cnt,0)) as sms,
		 sum(if(b.t = 'lms',b.cnt,0)) as lms,
		 sum(if(b.t = 'mms',b.cnt,0)) as mms
		from (
		select  substring( SEND_DATE,1,6) as dt, 'sms' as t, sum(SUCC_COUNT) as cnt from SDK_SMS_REPORT where SEND_DATE between #{start} and #{end} group by substring( SEND_DATE,1,6)
		union all
		select substring( SEND_DATE,1,6) as dt, 'lms' as t, sum(SUCC_COUNT) as cnt from SDK_MMS_REPORT where SEND_DATE between #{start} and #{end} and CONTENT_COUNT = 0 group by substring( SEND_DATE,1,6)
		union all
		select substring( SEND_DATE,1,6) as dt, 'mms' as t, sum(SUCC_COUNT) as cnt from SDK_MMS_REPORT where SEND_DATE between #{start} and #{end} and CONTENT_COUNT > 0 group by substring( SEND_DATE,1,6)
		) b group by b.dt order by b.dt desc
	</select>
	<select id="select_status_day_list" parameterType="com.m.admin.vo.StatusVO" resultType="com.m.admin.vo.StatusVO">
		select 
		 b.dt as dt, 
		 sum(if(b.t = 'sms',b.cnt,0)) as sms,
		 sum(if(b.t = 'lms',b.cnt,0)) as lms,
		 sum(if(b.t = 'mms',b.cnt,0)) as mms
		from (
		select  substring( SEND_DATE,1,8) as dt, 'sms' as t, sum(SUCC_COUNT) as cnt from SDK_SMS_REPORT where SEND_DATE between #{start} and #{end} group by substring( SEND_DATE,1,8)
		union all
		select substring( SEND_DATE,1,8) as dt, 'lms' as t, sum(SUCC_COUNT) as cnt from SDK_MMS_REPORT where SEND_DATE between #{start} and #{end} and CONTENT_COUNT = 0 group by substring( SEND_DATE,1,8)
		union all
		select substring( SEND_DATE,1,8) as dt, 'mms' as t, sum(SUCC_COUNT) as cnt from SDK_MMS_REPORT where SEND_DATE between #{start} and #{end} and CONTENT_COUNT > 0 group by substring( SEND_DATE,1,8)
		) b group by b.dt order by b.dt desc
	</select>
	<!-- status E -->
	
	<!-- KT S -->
	<select id="select_ktsms_list" parameterType="com.m.send.LogVO" resultType="com.m.send.MessageVO">
		select 
		 s.MSG_ID as idx,
		 s.SEND_DATE as sendDate,
		 s.USER_ID as user_id,
		 '2' as stat,
		 d.RESULT as rslt,
		 d.PHONE_NUMBER as phone,
		 d.DEST_NAME as name,
		 s.CALLBACK as callback,
		 s.SMS_MSG as msg,
		 s.RESERVED1 as groupKey,
		 '' as imagePath,
		 d.DELIVER_DATE as rsltDate,
		 s.RESERVED3 as failAddDate
		from 
		 SDK_SMS_REPORT s left outer join SDK_SMS_REPORT_DETAIL d on(s.MSG_ID = d.MSG_ID) 
		where s.USER_ID=#{user_id} and s.RESERVED1=#{idx,jdbcType=VARCHAR}
	</select>
	<select id="select_ktmms_list" parameterType="com.m.send.LogVO" resultType="com.m.send.MessageVO">
		select 
		 s.MSG_ID as idx,
		 s.SEND_DATE as sendDate,
		 s.USER_ID as user_id,
		 '2' as stat,
		 d.RESULT as rslt,
		 d.PHONE_NUMBER as phone,
		 d.DEST_NAME as name,
		 s.CALLBACK as callback,
		 s.MMS_MSG as msg,
		 s.RESERVED1 as groupKey,
		 s.CONTENT_DATA as imagePath,
		 d.DELIVER_DATE as rsltDate,
		 s.RESERVED3 as failAddDate
		from 
		 SDK_MMS_REPORT s left outer join SDK_MMS_REPORT_DETAIL d on(s.MSG_ID = d.MSG_ID) 
		where s.USER_ID=#{user_id} and s.RESERVED1=#{idx,jdbcType=VARCHAR}
	</select>
	<!-- KT E -->
	

</mapper>