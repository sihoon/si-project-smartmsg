<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
		alpha.disabledStates="0.5" minHeight="0" xmlns:ie="component.ie.*">
	<fx:Metadata>
		[HostComponent("spark.components.TextArea")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.accessibility.TextAccImpl;
			
			import spark.components.SkinnableContainer;
			import spark.components.TextArea;
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				if (promptDisplay)
				{
					promptDisplay.setLayoutBoundsSize(unscaledWidth - 1, unscaledHeight - 1);
					promptDisplay.setLayoutBoundsPosition(1, 1);
				}
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			} 
			
			protected function moveComponent_mouseDownHandler(event:MouseEvent):void {
				this.startDrag(false, new Rectangle(0,0,TextArea(owner).owner.width-this.width,TextArea(owner).owner.height-this.height));
			}
			
			protected function moveComponent_mouseUpHandler(event:MouseEvent):void { 
				this.stopDrag();
				/* var ta:TextArea = TextArea(owner);
				ta.maxWidth = ta.width - ta.x;
				ta.maxHeight = ta.height - ta.y;
				
				trace(event.localX); */
			}
			
			protected function delComponent_clickHandler(event:MouseEvent):void {
				
				SkinnableContainer( TextArea(owner).owner).removeElement( TextArea(this.owner) );
			}
			
			protected function textDisplay_focusInHandler(event:FocusEvent):void
			{
				moveComponent.visible = true;
				delComponent.visible = true;
				borders.visible = true;
				bgs.visible = true;
			}
			
			protected function textDisplay_focusOutHandler(event:FocusEvent):void
			{
				moveComponent.visible = false;
				delComponent.visible = false;
				borders.visible = false;
				bgs.visible = false;
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled" stateGroups="disabledStates"/>
		<s:State name="normalWithPrompt"/>
		<s:State name="disabledWithPrompt" stateGroups="disabledStates"/>
	</s:states>
	
	<s:Rect id="borders" left="0" right="0" top="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="#5C5C5C" weight="1"/>            
		</s:stroke>
		<s:fill>
			<s:SolidColor color="#FFFFFF"/>
		</s:fill>
	</s:Rect>
	
	<s:Rect id="bgs" left="1" top="1" right="1" height="1">
		<s:fill>
			<s:SolidColor color="#000000" alpha="0.12" />
		</s:fill>
	</s:Rect>
	
	<s:RichEditableText id="textDisplay" minHeight="0"
						left="5" right="5" top="5" paddingBottom="5" heightInLines="1" focusIn="textDisplay_focusInHandler(event)" focusOut="textDisplay_focusOutHandler(event)"
						/>
	<s:Label id="promptDisplay"
			 mouseEnabled="false" mouseChildren="false"
			 includeIn="normalWithPrompt,disabledWithPrompt" 
			 includeInLayout="false"
			 paddingLeft="3" paddingTop="5"
			 paddingRight="3" paddingBottom="3"
			 />
	
	<ie:PositionImage id="moveComponent"
					  mouseDown="moveComponent_mouseDownHandler(event)" mouseUp="moveComponent_mouseUpHandler(event)"
					  left="-16" top="-16" width="16" height="16" lefts="0" tops="-80" source="assets/ui-icons_222222_256x240.png" buttonMode="true" useHandCursor="true" />
	<ie:PositionImage id="delComponent" 
					  click="delComponent_clickHandler(event)"
					  right="-16" top="-16" width="16" height="16" lefts="-32" tops="-192" source="assets/ui-icons_222222_256x240.png" buttonMode="true" useHandCursor="true" />
	
</s:Skin>
