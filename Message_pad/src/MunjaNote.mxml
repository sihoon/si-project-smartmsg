<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ics="component.ics.*"
			   width="1024" height="740" 
			   frameRate="45"
			   creationComplete="app_creationCompleteHandler(event)"
			   stateChangeComplete="app_stateChangeCompleteHandler(event)" xmlns:component="component.*">
	<fx:Style source="/skin/ics/ics.css"/>
	<fx:Script>
		<![CDATA[
			import component.Address;
			import component.Bill;
			import component.Join;
			import component.Log;
			import component.Send;
			
			import lib.Gv;
			
			import mx.events.FlexEvent;
			
			private var join:Join;
			public var send:Send;
			public var address:Address;
			public var bill:Bill;
			public var log:Log;
			
			protected function app_creationCompleteHandler(event:FlexEvent):void { 
				
				ExternalInterface.addCallback("flexFunction",flexFunction_callback);
				ExternalInterface.call("flexCreateComplete");
			}
			
			private function flexFunction_callback(key:String, value:String):String {
				
				var re:String = "";
				if (key == "menu") this.currentState = value;
				return re;
			}
			
			private function join_completeHandler(event:Event):void { this.currentState = "send"; }
			
			protected function app_stateChangeCompleteHandler(event:FlexEvent):void
			{
				Gv.appState = currentState;
				// join create
				if (join == null && currentState == "join") {
					join = new Join();
					join.minWidth = 1024;
					join.minHeight = 420;
					join.horizontalCenter = 0;
					join.addEventListener("complete", join_completeHandler);
					main_group.addElement(join);
				} else if (join != null) {
					join.removeEventListener("complete", join_completeHandler);
					this.main_group.removeElement(join);
					join = null;
				}
				
				
				// send create
				if (send == null && currentState == "send") {
					send = new Send();
					send.minWidth = 1024;
					send.minHeight = 420;
					send.horizontalCenter = 0;
					main_group.addElement(send);
				} else if (send != null) {
					main_group.removeElement(send);
					send.destroy(null);
					send = null;
				}
				
				// Address create
				if (address == null && currentState == "address") {
					address = new Address();
					address.minWidth = 1024;
					address.minHeight = 420;
					address.horizontalCenter = 0;
					main_group.addElement(address);
				} else if (address != null) {
					main_group.removeElement(address);
					address.destory();
					address = null;
				}
				
				// bill create
				if (bill == null && currentState == "bill") {
					bill = new Bill();
					bill.minWidth = 1024;
					bill.minHeight = 420;
					bill.horizontalCenter = 0;
					main_group.addElement(bill);
				} else if (bill != null) {
					main_group.removeElement(bill);
					bill = null;
				}
				
				// log create
				if (log == null && currentState == "log") {
					log = new Log();
					log.minWidth = 1024;
					log.minHeight = 420;
					log.horizontalCenter = 0;
					main_group.addElement(log);
				} else if (log != null) {
					main_group.removeElement(log);
					log.destroy();
					
					log = null;
				}
				
				
			}
			
			
			
			protected function login_loginHandler(event:Event):void	{
				
				bg.visible = false;
				ap.valueFrom = 0;
				ap.valueTo = 350;
				a.play();
				
				if (address != null)
					address.addedtostage_handler(null);
				else if (log != null) log.getSentList();
					
			}
			
			protected function login_logoutHandler(event:Event):void {
				
				bg.visible = true;
				ap.valueFrom = 350;
				ap.valueTo = 0;
				a.play();
				login.user_id.setFocus();
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Animate id="a" 
				   duration="750"
				   target="{login}">
			<s:SimpleMotionPath id="ap" valueFrom="0"
								valueTo="350"
								property="verticalCenter" />
		</s:Animate>
	</fx:Declarations>
	<s:states>
		<s:State name="send"/>
		<s:State name="address"/>
		<s:State name="bill"/>
		<s:State name="log"/>
		<s:State name="join"/>
	</s:states>
		
	<s:VGroup width="1024" height="740" gap="0" depth="0">
		
		<s:Group id="main_group" width="100%" height="696"></s:Group><!-- main_group -->
		
		<s:Group id="navigationBar" width="100%" height="44" >
			<s:Rect width="100%" height="100%"><s:fill><s:SolidColor color="#000000"/></s:fill></s:Rect>
			<s:HGroup top="12" left="20" gap="20" verticalAlign="bottom">
				<s:Image source="skin/ics/assets/back.png" alpha="0.4" smooth="true" buttonMode="true" mouseOver="event.currentTarget.alpha=1" mouseOut="event.currentTarget.alpha=0.4" />
				<s:Image source="skin/ics/assets/home.png" alpha="0.4" smooth="true" buttonMode="true"
						 mouseOver="event.currentTarget.alpha=1" mouseOut="event.currentTarget.alpha=0.4"/>
				<s:Image source="skin/ics/assets/menus.png" alpha="0.4" buttonMode="true" mouseOver="event.currentTarget.alpha=1" mouseOut="event.currentTarget.alpha=0.4"/>
			</s:HGroup>
			<s:HGroup right="4" verticalCenter="0" >
				<s:Rect width="100%" height="100%"><s:fill><s:SolidColor color="#FF0000"/></s:fill></s:Rect>
				<s:Image source="skin/ics/assets/signal.png"/>
				<ics:Battery percent="10"/>
				<ics:CurrentTime />
			</s:HGroup>
		</s:Group><!-- navigationBar -->
		
	</s:VGroup>
	
	<s:Rect id="bg" visible="true" width="1024" height="740">
		<s:fill>
			<s:SolidColor color="#999999" alpha="0.5" />
		</s:fill>
	</s:Rect> 
	
	<component:Login id="login"
					 login="login_loginHandler(event)"
					 logout="login_logoutHandler(event)"
					 verticalCenter="0" horizontalCenter="0"
					 skinClass="skin.LoginSkin" />
	
	
		
	
</s:Application>
