<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:component="component.*"
			   xmlns:services="services.*"
			   xmlns:excel="component.excel.*"
			   width="100%" height="100%"
			   frameRate="45"
			   preloader="SparkDownloadProgressBarSubClassMin"
			   stateChangeComplete="application_stateChangeCompleteHandler(event)"
			   creationCompleteEffect="{fadeEffect}" xmlns:ics="component.ics.*"
			   >
	<!-- preloader="lib.AppProgressBar" -->
	<fx:Style source="/skin/ics/ics.css"/>
	<fx:Script>
		<![CDATA[
			import component.Address;
			import component.Bill;
			import component.Join;
			import component.Log;
			import component.Send;
			import component.util.ButtonSpinner;
			import component.util.TextInputSearch;
			
			import lib.Gv;
			
			import mx.events.FlexEvent;
			
			private var join:Join;
			public var send:Send;
			public var address:Address;
			public var bill:Bill;
			public var log:Log;
			
			// login check
			
			private var component_util_TextInputSearch_obj:component.util.TextInputSearch;
			
			private var component_util_ButtonSpinner_obj:component.util.ButtonSpinner;
			public function login_check():void {
				login.login_check();
			}
			
			
			public function joinView():void {
				
				this.currentState = "join";
				/* join = new Join();
				join.addEventListener("complete", join_completeHandler);
				this.main_group.addElement(join); */
			}
			
			private function join_completeHandler(event:Event):void {
				
				//join_remove();
				this.currentState = "home";
				
			}
			private function join_remove():void {
				
				if (join != null) {
					join.removeEventListener("complete", join_completeHandler);
					this.main_group.removeElement(join);
					join = null;
					login.login_check();	
				}
				
			}
			
			protected function application_stateChangeCompleteHandler(event:FlexEvent):void
			{
				Gv.appState = currentState;
				// join create
				if (join == null && currentState == "join") {
					join = new Join();
					join.minWidth = 1024;
					join.minHeight = 420;
					join.horizontalCenter = 0;
					join.addEventListener("complete", join_completeHandler);
					main_group.addElement(join);
				} else if (join != null) {
					join.removeEventListener("complete", join_completeHandler);
					this.main_group.removeElement(join);
					join = null;
					login.login_check();	
				}
				
				
				// send create
				if (send == null && currentState == "send") {
					send = new Send();
					send.minWidth = 1024;
					send.minHeight = 420;
					send.horizontalCenter = 0;
					main_group.addElement(send);
				} else if (send != null) {
					main_group.removeElement(send);
					send.destroy(null);
					send = null;
				}
				
				// Address create
				if (address == null && currentState == "address") {
					address = new Address();
					address.minWidth = 1024;
					address.minHeight = 420;
					address.horizontalCenter = 0;
					main_group.addElement(address);
				} else if (address != null) {
					main_group.removeElement(address);
					address.destory();
					address = null;
				}
				
				// <component:Bill id="bill" includeIn="bill" horizontalCenter="0" minWidth="1024" minHeight="420" width="100%" />
				// Address create
				if (bill == null && currentState == "bill") {
					bill = new Bill();
					bill.minWidth = 1024;
					bill.minHeight = 420;
					bill.horizontalCenter = 0;
					main_group.addElement(bill);
				} else if (bill != null) {
					main_group.removeElement(bill);
					bill = null;
				}
				
				//<component:Log id="log" includeIn="log" skinClass="skin.LogSkin" minWidth="1024" minHeight="420" horizontalCenter="0" />
				// log create
				if (log == null && currentState == "log") {
					log = new Log();
					log.minWidth = 1024;
					log.minHeight = 420;
					log.horizontalCenter = 0;
					main_group.addElement(log);
				} else if (log != null) {
					main_group.removeElement(log);
					log.destroy();
					
					log = null;
				}
				
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Fade id="fadeEffect" alphaFrom="0" alphaTo="1"/>
	</fx:Declarations>
	<s:states>
		<s:State name="home"/>
		<s:State name="send"/>
		<s:State name="address"/>
		<s:State name="bill"/>
		<s:State name="log"/>
		<s:State name="join"/>
	</s:states>
	<s:transitions>
		<s:Transition id="transition" fromState="*" toState="*">
			<s:Parallel id="t1" targets="{[menus, login]}">
				<s:Move  duration="400"/>
<!--				<s:Resize duration="200"/>-->
			</s:Parallel>
		</s:Transition>
	</s:transitions>
	
	
	<s:Group id="pad" horizontalCenter="0" top="20" width="1024" height="768">
		
		<component:Menus id="menus" depth="5" 
						 skinClass="skin.MenuSkin"
						 left.home="200"
						 left="800"
						 bottom.home="100"
						 bottom="-15"
						 change="{this.currentState = event.result as String}"/>
		
		<component:Login id="login" depth="4"
						 bottom.home="500"
						 bottom="10"
						 horizontalCenter="0"
						 skinClass="skin.LoginSkin" excludeFrom="join" />
		
		<s:VGroup width="1024" height="768" gap="0" depth="0">
			
			<s:Group id="statusBar" width="100%" height="24">
				<!--<s:Rect width="100%" height="100%"><s:fill><s:SolidColor color="#000000"/></s:fill></s:Rect>-->
				
				<s:Label text="MessageYo" verticalCenter="0" left="10" color="#D6D6D6"
						 buttonMode="true" useHandCursor="true"
						 click="{this.menus.clickStat='home'}" />				
				
			</s:Group><!-- statusBar -->
			
			<s:Group id="main_group" width="100%" height="696">
				<component:Home id="home" includeIn="home" left="0" right="0" top="0" bottom="0" minWidth="1024" minHeight="420" horizontalCenter="0" />
			</s:Group><!-- main_group -->
			
			
			
			<s:Group id="navigationBar" width="100%" height="48" >
				<s:Rect width="100%" height="100%"><s:fill><s:SolidColor color="#000000"/></s:fill></s:Rect>
				<s:HGroup top="12" left="20" gap="20" verticalAlign="bottom">
					<s:Image source="skin/ics/assets/back.png" alpha="0.4" smooth="true" buttonMode="true" mouseOver="event.currentTarget.alpha=1" mouseOut="event.currentTarget.alpha=0.4" />
					<s:Image source="skin/ics/assets/home.png" alpha="0.4" smooth="true" buttonMode="true"
							 mouseOver="event.currentTarget.alpha=1" mouseOut="event.currentTarget.alpha=0.4"
							 click="{this.menus.clickStat='home'}"/>
					<s:Image source="skin/ics/assets/menus.png" alpha="0.4" buttonMode="true" mouseOver="event.currentTarget.alpha=1" mouseOut="event.currentTarget.alpha=0.4"/>
				</s:HGroup>
				<s:HGroup right="4" verticalCenter="0" >
					<s:Rect width="100%" height="100%"><s:fill><s:SolidColor color="#FF0000"/></s:fill></s:Rect>
					<s:Image source="skin/ics/assets/signal.png"/>
					<ics:Battery percent="10"/>
					<ics:CurrentTime />
				</s:HGroup>
			</s:Group><!-- navigationBar -->
			
		</s:VGroup>
		
	</s:Group>
	
	
	
</s:Application>